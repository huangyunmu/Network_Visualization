/*
 * Graph.java
 *
 * Created on __DATE__, __TIME__
 */

package andy.GUI;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.io.IOException;

import javax.swing.BoxLayout;
import javax.swing.JOptionPane;

import org.graphstream.graph.implementations.DefaultGraph;
import org.graphstream.ui.swingViewer.DefaultView;
import org.graphstream.ui.swingViewer.Viewer;
import org.graphstream.ui.swingViewer.ViewerListener;
import org.graphstream.ui.swingViewer.ViewerPipe;

import andy.core.GraphManager;

/**
 * 
 * @author __USER__
 */
public class GraphContainer extends javax.swing.JFrame implements
		MouseWheelListener {
	private GraphManager manager;
	private DefaultGraph graph;
	private Viewer viewer;
	private DefaultView view;
	private ViewerPipe vp;
	private NodeClickListener clisten;
	private boolean focusTag = false;
	private String linkLocation, nodeLocation, outputLocation;
	private String[] layoutOption = { "Disable autolayout", "Enable autolayout" };
	private String[] commentOption = { "Hide comment", "Show comment", };
	private String[] nodeControlOption = { "Open single node control",
			"Close single node control" };
	private boolean isMultiple;
	private int count = 0;

	/**
	 * Creates new form Graph
	 * 
	 * @throws IOException
	 */
	public GraphContainer(int[] nodeVar, int[] linkVar,
			boolean[] statusVarList, String charSet, String title,
			String linkLocation, String nodeLocation, String outputLocation)
			throws IOException {
		initComponents();
		this.graphTitle.setText(title + "_0");
		this.layoutButton.setText(layoutOption[0]);
		this.commentButton.setText((commentOption[0]));
		this.focusNodeButton.setText(this.nodeControlOption[0]);

		if (statusVarList[3] == false) {
			// if the point provide coordination information, the
			// auto layout should be cancelled
		}
		// this.setResizable(false);
		if (statusVarList[1] == true) {
			// is multiple
			this.isMultiple = true;
			this.saveButton.setVisible(false);
		} else {
			this.isMultiple = false;
			this.multipleGraphButtion.setVisible(false);
		}

		// for multiple graph

		Toolkit tk = Toolkit.getDefaultToolkit();
		int xSize = ((int) tk.getScreenSize().getWidth());
		int ySize = ((int) tk.getScreenSize().getHeight()) - 175;
		// System.out.println(xSize);
		// System.out.println(ySize);
		this.setSize(xSize, ySize);

		// this.setPreferredSize(new Dimension(800, 600));

		BoxLayout outerLayout = new BoxLayout(this.outerContainer,
				BoxLayout.X_AXIS);
		// this.outContainer.setLayout(layout);
		// BoxLayout innerLayout1 = new BoxLayout(this.innerContainer1,
		// BoxLayout.Y_AXIS);
		BoxLayout innerLayout2 = new BoxLayout(this.innerContainer2,
				BoxLayout.Y_AXIS);
		this.outerContainer.setLayout(outerLayout);
		// this.innerContainer1.setLayout(innerLayout1);
		this.innerContainer2.setLayout(innerLayout2);

		manager = new GraphManager(nodeVar, linkVar, statusVarList, charSet,
				title);
		this.linkLocation = linkLocation;
		this.nodeLocation = nodeLocation;
		this.outputLocation = outputLocation;

		// check use which control
		boolean tag = true;
		if (nodeLocation.equals("")) {
			System.out.println("only link");
			tag = manager.controlPre(linkLocation, outputLocation);
		} else {
			System.out.println("link and node");
			tag = manager
					.controlPre(linkLocation, nodeLocation, outputLocation);
		}
		if (tag == false) {
			String errorMessage = "Error! Please double check the file name.";
			JOptionPane.showMessageDialog(this, errorMessage);
			// Uncompleted
		}

		graph = (DefaultGraph) manager.getDrawer().getGraph();
		viewer = new Viewer(graph,
				Viewer.ThreadingModel.GRAPH_IN_ANOTHER_THREAD);

		if (statusVarList[3] == true) {
			viewer.enableAutoLayout();
		} else {
			viewer.disableAutoLayout();
		}
		this.view = (DefaultView) viewer.addDefaultView(false);
		this.innerContainer2.setPreferredSize(new Dimension(xSize - 400,
				ySize - 50));
		this.innerContainer2.add(view);
		this.pack();
		this.setVisible(true);
		vp = viewer.newViewerPipe();
		view.addMouseWheelListener(this);
		System.out.println(this.manager.getNumOfPoints());
		// this.manager.showAllLinks();
		// clickControl=new Clicks(this.viewer,this.view,this.graph,this.vp);
		// vp.addViewerListener((ViewerListener) clickControl);
		// clisten = new NodeClickListener(vp, view, graph);
		// vp.addViewerListener((ViewerListener) clisten);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		outerContainer = new javax.swing.JPanel();
		innerContainer2 = new javax.swing.JPanel();
		innerContainer1 = new javax.swing.JPanel();
		commentButton = new javax.swing.JButton();
		layoutButton = new javax.swing.JButton();
		focusNodeButton = new javax.swing.JButton();
		showGraphInfoButton = new javax.swing.JButton();
		saveButton = new javax.swing.JButton();
		multipleGraphButtion = new javax.swing.JButton();
		demoButtion = new javax.swing.JButton();
		graphTitle = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("My Graph");

		javax.swing.GroupLayout innerContainer2Layout = new javax.swing.GroupLayout(
				innerContainer2);
		innerContainer2.setLayout(innerContainer2Layout);
		innerContainer2Layout.setHorizontalGroup(innerContainer2Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 385, Short.MAX_VALUE));
		innerContainer2Layout.setVerticalGroup(innerContainer2Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 390, Short.MAX_VALUE));

		commentButton.setText("comment");
		commentButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				commentButtonActionPerformed(evt);
			}
		});

		layoutButton.setText("layout");
		layoutButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				layoutButtonActionPerformed(evt);
			}
		});

		focusNodeButton.setText("Single node control");
		focusNodeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				focusNodeButtonActionPerformed(evt);
			}
		});

		showGraphInfoButton.setText("Graph info");
		showGraphInfoButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						showGraphInfoButtonActionPerformed(evt);
					}
				});

		saveButton.setText("Save");
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveButtonActionPerformed(evt);
			}
		});

		multipleGraphButtion.setText("Multiple");
		multipleGraphButtion
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						try {
							multipleGraphButtionActionPerformed(evt);
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				});

		demoButtion.setText("Demo");
		demoButtion.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				demoButtionActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout innerContainer1Layout = new javax.swing.GroupLayout(
				innerContainer1);
		innerContainer1.setLayout(innerContainer1Layout);
		innerContainer1Layout
				.setHorizontalGroup(innerContainer1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								innerContainer1Layout
										.createSequentialGroup()
										.addGroup(
												innerContainer1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																layoutButton,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																251,
																Short.MAX_VALUE)
														.addComponent(
																commentButton,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																251,
																Short.MAX_VALUE)
														.addComponent(
																showGraphInfoButton,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																251,
																Short.MAX_VALUE)
														.addComponent(
																focusNodeButton,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																251,
																Short.MAX_VALUE)
														.addComponent(
																saveButton,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																251,
																Short.MAX_VALUE)
														.addComponent(
																multipleGraphButtion,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																251,
																Short.MAX_VALUE)
														.addComponent(
																demoButtion,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																251,
																Short.MAX_VALUE))
										.addContainerGap()));
		innerContainer1Layout
				.setVerticalGroup(innerContainer1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								innerContainer1Layout
										.createSequentialGroup()
										.addGap(44, 44, 44)
										.addComponent(layoutButton)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(commentButton)
										.addGap(18, 18, 18)
										.addComponent(showGraphInfoButton)
										.addGap(18, 18, 18)
										.addComponent(focusNodeButton)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(demoButtion)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(saveButton)
										.addGap(18, 18, 18)
										.addComponent(multipleGraphButtion)
										.addContainerGap(124, Short.MAX_VALUE)));

		javax.swing.GroupLayout outerContainerLayout = new javax.swing.GroupLayout(
				outerContainer);
		outerContainer.setLayout(outerContainerLayout);
		outerContainerLayout.setHorizontalGroup(outerContainerLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						outerContainerLayout
								.createSequentialGroup()
								.addComponent(innerContainer1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(39, 39, 39)
								.addComponent(innerContainer2,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE).addContainerGap()));
		outerContainerLayout
				.setVerticalGroup(outerContainerLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								outerContainerLayout
										.createSequentialGroup()
										.addGroup(
												outerContainerLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																innerContainer2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGroup(
																outerContainerLayout
																		.createSequentialGroup()
																		.addComponent(
																				innerContainer1,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addGap(57,
																				57,
																				57)))
										.addContainerGap()));

		graphTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		graphTitle.setText("title");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(outerContainer,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE))
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap(275, Short.MAX_VALUE)
								.addComponent(graphTitle).addGap(428, 428, 428)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(graphTitle)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(outerContainer,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(229, 229, 229)));

		pack();
	}// </editor-fold>
		// GEN-END:initComponents

	private void demoButtionActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		// this button is only for the demo
		// it would highlight the root
		// Node tempNode=this.manager.getDrawer().getGraph().getNode(1);
		this.manager.demo();
		// String nodeID=this.manager.getPointID(1);

	}

	// GEN-END:initComponents

	private void multipleGraphButtionActionPerformed(
			java.awt.event.ActionEvent evt) throws IOException {
		// TODO add your handling code here:
		int N = this.manager.getNumOfMulGraph();
		System.out.println(N);
		if (count == N) {
			JOptionPane.showMessageDialog(this, "Totally " + String.valueOf(N)
					+ " graphs. No more data");
			return;
		}
		// if (count == 0) {
		// this.manager.getDrawer().saveFile(0);
		// System.out.println("save file 0");
		// this.manager.getDrawer().sleep(2500);
		// }

		// this.manager.showAllLinks();

		// this.graphTitle.repaint();
		boolean tag = this.manager.multipleControl(this.linkLocation,
				this.nodeLocation, this.outputLocation, count);
		if (tag == false) {
			return;
		}

		count++;
		if (count == N) {
			JOptionPane.showMessageDialog(this, "Multiple graphs complete!");
		} else {
			this.graphTitle.setText(manager.getTitle() + "_"
					+ String.valueOf(count));
		}
	}

	private void showGraphInfoButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		String message = "This graph contains "
				+ String.valueOf(this.manager.getNumOfLink()) + " links and "
				+ String.valueOf(this.manager.getNumOfPoints()) + " nodes.";
		if (this.isMultiple == true) {
			message = message + "Totally "
					+ String.valueOf(this.manager.getNumOfMulGraph())
					+ " data sets are founded.";
		}
		JOptionPane.showMessageDialog(this, message);
		// TODO add your handling code here:
	}

	private void focusNodeButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		if (this.focusTag == false) {
			focusTag = true;
			clisten = new NodeClickListener(vp, view, graph, manager);
			vp.addViewerListener((ViewerListener) clisten);
			this.focusNodeButton.setText(this.nodeControlOption[1]);
		} else {
			this.focusTag = false;
			vp.removeViewerListener(clisten);
			this.focusNodeButton.setText(this.nodeControlOption[0]);
		}

	}

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		// save the file here
		// only for single graph
		this.manager.getDrawer().saveFile(0);
		String message = this.manager.getTitle() + "_0.png"
				+ " has been saved to " + outputLocation;
		JOptionPane.showMessageDialog(this, message);
	}

	private void layoutButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		if (this.layoutButton.getText().equals(this.layoutOption[0])) {
			this.layoutButton.setText(this.layoutOption[1]);
			this.viewer.disableAutoLayout();
		} else {
			this.layoutButton.setText(this.layoutOption[0]);
			this.viewer.enableAutoLayout();
		}
	}

	private void commentButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		if (this.commentButton.getText().equals(this.commentOption[1])) {
			this.commentButton.setText(this.commentOption[0]);
			manager.showComment();
		} else {
			this.commentButton.setText(this.commentOption[1]);
			manager.hideComment();
		}
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public void mouseWheelMoved(MouseWheelEvent e) {
		if (view != null) {
			int notches = e.getWheelRotation();
			Point point = e.getPoint();
			double i = view.getCamera().getViewPercent();
			// view.getCamera().setViewCenter(point.getX(),point.getY(),0);
			if (i < 1) {
				if (point.getX() < 400) {
					// 400 is an example of a hardcode value to change
					if (point.getY() < 300) {
						view.getCamera().getViewCenter().move(-1, 1);
					} else if (point.getY() < 600) {
						view.getCamera().getViewCenter().move(-1, 0);
					} else {
						view.getCamera().getViewCenter().move(-1, -1);
					}
				} else if (point.getX() < 800) {
					if (point.getY() < 300) {
						view.getCamera().getViewCenter().move(0, 1);
					} else if (point.getY() < 600) {
						view.getCamera().getViewCenter().move(0, 0);
					} else {
						view.getCamera().getViewCenter().move(0, -1);
					}
				} else {
					if (point.getY() < 300) {
						view.getCamera().getViewCenter().move(1, 1);
					} else if (point.getY() < 600) {
						view.getCamera().getViewCenter().move(1, 0);
					} else {
						view.getCamera().getViewCenter().move(1, -1);
					}
				}
			} else {
				view.getCamera().resetView();
			}

			// enlarge or shrink
			if (notches > 0) {
				view.getCamera().setViewPercent(i * 1.1);
			} else {

				view.getCamera().setViewPercent(i * 0.9);
			}
		}
	}

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton commentButton;
	private javax.swing.JButton demoButtion;
	private javax.swing.JButton focusNodeButton;
	private javax.swing.JLabel graphTitle;
	private javax.swing.JPanel innerContainer1;
	private javax.swing.JPanel innerContainer2;
	private javax.swing.JButton layoutButton;
	private javax.swing.JButton multipleGraphButtion;
	private javax.swing.JPanel outerContainer;
	private javax.swing.JButton saveButton;
	private javax.swing.JButton showGraphInfoButton;
	// End of variables declaration//GEN-END:variables

}